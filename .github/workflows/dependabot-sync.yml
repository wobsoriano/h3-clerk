name: Dependency Update Changeset

on:
  pull_request:
    types: [opened, labeled, synchronize]

jobs:
  create-changeset:
    if: contains(github.event.pull_request.labels.*.name, 'dependencies')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - uses: pnpm/action-setup@v4
        with:
          version: 8.6.3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: pnpm

      - run: pnpm install

      - name: Create and push changeset
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');

            const prBody = context.payload.pull_request.body;
            const prNumber = context.payload.pull_request.number;
            const updates = prBody.match(/Updates `([^`]+)` from [0-9.]+ to [0-9.]+/g)
                            ?.map(update => update.replace(/Updates `(.+)` from [0-9.]+ to ([0-9.]+)/, '$1 to $2'))
                            || [];

            if (updates.length === 0) {
              core.info('No package updates found in PR body');
              return;
            }

            const changesetDir = path.join(process.env.GITHUB_WORKSPACE, '.changeset');
            fs.mkdirSync(changesetDir, { recursive: true });

            const changesetContent = `---
            "${context.repo.repo}": patch
            ---

            Bump ${updates.join(', ')}
            `;

            const changesetPath = path.join(changesetDir, `dependabot-${prNumber}.md`);
            fs.writeFileSync(changesetPath, changesetContent);

            try {
              // Fetch the latest changes
              await exec.exec('git', ['fetch', 'origin', context.payload.pull_request.head.ref]);

              // Configure git
              await exec.exec('git', ['config', '--local', 'user.email', 'action@github.com']);
              await exec.exec('git', ['config', '--local', 'user.name', 'GitHub Action']);

              // Stage the changeset file
              await exec.exec('git', ['add', changesetPath]);

              // Check if there are changes to commit
              const { stdout } = await exec.getExecOutput('git', ['status', '--porcelain']);

              if (stdout) {
                // Commit changes
                await exec.exec('git', ['commit', '-m', `Add or update changeset for PR #${prNumber}`]);

                // Push changes
                await exec.exec('git', ['push', 'origin', `HEAD:${context.payload.pull_request.head.ref}`]);
                core.info('Changeset created or updated and pushed successfully');
              } else {
                core.info('No changes to commit. Changeset is already up to date.');
              }
            } catch (error) {
              core.setFailed(`Action failed with error: ${error.message}`);
              core.debug(`Full error object: ${JSON.stringify(error)}`);
            }
